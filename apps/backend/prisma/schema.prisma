// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String                @id @default(cuid())
  email              String                @unique
  password           String
  name               String?
  role               Role                  @default(USER)
  emailVerified      Boolean               @default(false)

  // Stripe fields
  stripeCustomerId   String?               @unique
  subscriptionStatus SubscriptionStatus    @default(NONE)
  subscriptionId     String?               @unique
  planType           PlanType              @default(FREE)
  currentPeriodEnd   DateTime?

  createdAt          DateTime              @default(now())
  updatedAt          DateTime              @updatedAt
  refreshTokens      RefreshToken[]
  verificationTokens VerificationToken[]
  resetTokens        PasswordResetToken[]
  csrfTokens         CsrfToken[]
  subscriptions      Subscription[]

  @@map("users")
}

model RefreshToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt DateTime
  revoked   Boolean  @default(false)
  createdAt DateTime @default(now())

  @@index([userId])
  @@index([token, revoked])
  @@index([revoked])         // Performance: cleanup job & queries filtering by revoked
  @@index([userId, revoked]) // Performance: getUserActiveTokens queries
  @@index([expiresAt])       // Performance: cleanup job expiration check
  @@map("refresh_tokens")
}

model VerificationToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@index([userId])
  @@index([token])
  @@index([expiresAt])       // Performance: cleanup job expiration check
  @@map("verification_tokens")
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@index([userId])
  @@index([token])
  @@index([expiresAt])       // Performance: cleanup job expiration check
  @@map("password_reset_tokens")
}

model CsrfToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@index([userId])
  @@index([token])
  @@index([expiresAt])       // Performance: cleanup job expiration check
  @@map("csrf_tokens")
}

model Subscription {
  id                 String             @id @default(cuid())
  userId             String
  user               User               @relation(fields: [userId], references: [id], onDelete: Cascade)

  stripeSubscriptionId String           @unique
  stripePriceId        String
  stripeCustomerId     String

  status             SubscriptionStatus
  planType           PlanType

  currentPeriodStart DateTime
  currentPeriodEnd   DateTime
  cancelAtPeriodEnd  Boolean            @default(false)
  canceledAt         DateTime?

  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt

  @@index([userId])
  @@index([stripeSubscriptionId])
  @@map("subscriptions")
}

enum Role {
  USER
  ADMIN
  MODERATOR
}

enum SubscriptionStatus {
  NONE        // Pas d'abonnement
  ACTIVE      // Abonnement actif
  PAST_DUE    // Paiement échoué
  CANCELED    // Annulé
  INCOMPLETE  // Paiement initial en cours
  TRIALING    // Période d'essai
}

enum PlanType {
  FREE        // Plan gratuit
  PRO         // Plan Pro ($15/mois)
  BUSINESS    // Plan Business ($50/mois)
}
